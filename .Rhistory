alcoholism=as.numeric(`Alcoholism`)))
#Antigen result: new cut-off >=16.717 ng/ml
dat$OV_antigen_result <- ifelse(dat$OV_antigen_conc>=16.717,1,0)
#Set missing values to NA
dat[dat == "N/A"] <- NA
dat[dat == "<NA>"] <- NA
#Reclassify missing (7) as NA for occupation
dat[!is.na(dat$occupation) & dat$occupation==7,]$occupation <- NA
#Reclassify missing (8) as NA for education
dat[!is.na(dat$education) & dat$education==8,]$education <- NA
#Reclassify missing (2) as NA for family history of liver cancer
dat[!is.na(dat$family_history_liver_cancer) & dat$family_history_liver_cancer==2,]$family_history_liver_cancer <- NA
#Reclassify missing (2) as NA for smoking
dat[!is.na(dat$smoking) & dat$smoking==2,]$smoking <- NA
#Reclassify missing (2) as NA for drink alcohol
dat[!is.na(dat$drink_alcohol) & dat$drink_alcohol==2,]$drink_alcohol <- NA
#Reclassify missing (2) as NA for alcoholism
dat[!is.na(dat$alcoholism) & dat$alcoholism==2,]$alcoholism <- NA
#Reclassify missing (2) as NA for raw fish consumption
dat[!is.na(dat$raw_fish) & dat$raw_fish==2,]$raw_fish <- NA
#get number of drops examined & total OV eggs
num_drops = OV_total = MIF_total = c()
for(i in 1:nrow(dat)){
drops = dat[i, c("OV_1", "OV_2", "OV_3", "OV_4", "OV_5")]
mif_obs = dat[i, c("MIF_1", "MIF_2", "MIF_3", "MIF_4", "MIF_5")]
#Count number of readings which are not NAs
indx = which(!is.na(drops))
num_drops[i] = length(indx)
#Sum val
eggs = as.numeric(as.vector(drops[indx]))
mif = as.numeric(as.vector(mif_obs[indx]))
OV_total[i] = sum(eggs)
MIF_total[i] = sum(mif)
}
#add to data.frame
dat$FECT_drops_examined <- num_drops
dat$OV_total <- OV_total
dat$MIF_total <- MIF_total
#revalue outlier Urine antigen conc
dat$OV_antigen_conc[3798] <- 31636.88
#Calculate OV FECT EPG
dat$FECT_total_drop[is.na(dat$FECT_total_drop)] <- 1
dat$OV_EPG <- with(dat, (OV_total*FECT_total_drop)/(FECT_Weight*FECT_drops_examined))
dat$OV_EPG_int <- round(dat$OV_EPG)
#MIF EPG
dat$MIF_EPG <- with(dat, (MIF_total*FECT_total_drop)/(FECT_Weight*FECT_drops_examined))
dat$MIF_EPG_int <- round(dat$MIF_EPG)
#Village level ids etc
dat$id <- rownames(dat)
villages <- ifelse(is.na(dat$district), NA,
ifelse(is.na(dat$village), NA,
paste(dat$district, dat$village)))
dat$village_id <- ifelse(is.na(villages), NA, match(villages, unique(villages)))
#Household ids
households <- ifelse(is.na(dat$village_id), NA,
ifelse(is.na(dat$house), NA,
paste(dat$village_id, dat$house)))
dat$household_id <- ifelse(is.na(households), NA, match(households, unique(households)))
#District co-ordinates
coords <- read.table("/Users/tomc/Google Drive/Opisthorchis/Data/district-coordinates.txt",
sep="\t",header=T)
colnames(coords) <- c("id", "name", "province", "lat", "long")
#District id (relates to map/table in baseline analysis)
dat$district_id <- coords$id[match(dat$district, coords$name)]
## export cleaned data.frame
write.table(dat,"/Users/tomc/Google Drive/Opisthorchis/Baseline/version-3/OV_cleaned_data_V3.csv", sep=",", quote=F, row.names=F, col.names=T)
#Clear workspace (if necessary)
rm(list = ls(all.names = TRUE))
#Set working directory with hard link
#setwd("/gpfs3/users/hollingsworth/mxh325/worm_inference/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#rstan has specific installation requirements - https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(cmdstanr)
library(reshape2)
library(posterior)
#Read in data
d <- read.csv("/Users/tomc/Google Drive/Opisthorchis/Baseline/version-3/OV_cleaned_data_V3.csv") #this dataset has been updated
ov.long <- melt(data=d, id.vars=c("id","PID", "household_id","village_id","district_id"),
measure.vars=c("OV_1","OV_2","OV_3","OV_4","OV_5"), na.rm=T,
value.name = "egg_count", variable="observation")
#Remove observations where village is missing
ov.cc <- ov.long[!is.na(ov.long$village_id),]
#Sort data by id and village
ov.sort <- ov.cc[order(ov.cc$id, ov.cc$village_id),]
#Individual IDs included
id.cc <- unique(ov.sort$id)
#Village IDs
village.N <- match(d[id.cc, "village_id"], unique(ov.sort$village_id))
village.K <- match(ov.sort$village_id, unique(ov.sort$village_id))
#antigen indicator
urine <- ifelse(is.na(d[id.cc, "OV_antigen_conc"]),0,1)
antigen_cutoff <- ifelse(is.na(d[id.cc, "OV_antigen_conc"]),0,
ifelse(d[id.cc, "OV_antigen_conc"]>=19.4,1,0)) #published cut-off
#Format slides for model
slides <- as.vector(table(ov.sort$id))
slide1 <- head(c(1, (cumsum(slides)+1)), -1)
slide2 <- cumsum(slides)
summary(d$MIF_EPG)
summary(d$OV_antigen_result)
#Remove observations where observations are missing
d.cc <- d[!is.na(d$village_id)&!is.na(d$OV_EPG)&!is.na(d$OV_antigen_result),]
#Sort data by id and village
d.sort <- d.cc[order(d.cc$id, d.cc$village_id),]
nrow(d.sort)
#antigen indicator
urine <- ifelse(is.na(d[id.cc, "OV_antigen_conc"]),0,1)
antigen_cutoff <- ifelse(is.na(d[id.cc, "OV_antigen_conc"]),0,
ifelse(d[id.cc, "OV_antigen_conc"]>=19.4,1,0)) #published cut-off
#Format slides for model
slides <- rep(1, nrow(d.sort))
slide1 <- head(c(1, (cumsum(slides)+1)), -1)
slide2 <- cumsum(slides)
slide1
head(slide1)
head(slide2)
#Read in worm fecundity data
wf <- read.csv("worm-fecund-aut-lao.csv")
#Read in worm fecundity data
wf <- read.csv("/Users/tomc/Google Drive/Opisthorchis/Spencer/worm-fecund-aut-lao.csv")
#Data list for stan
in.nb <- list(N=length(unique(ov.sort$id)),
K=nrow(ov.sort),
N_clusters=length(unique(ov.sort$district_id)),
cluster=d[id.cc, "district_id"],
slides=slides,
slide1=slide1,
slide2=slide2,
eggs=ov.sort$egg_count,
urine=urine,
antigen=antigen_cutoff,
big_int=300,
egg_neg=d[id.cc, "OV_FECT_Result"],
stool_mass=d[id.cc, "FECT_Weight"],
#worm fecundity data
Nw=nrow(wf),
E=wf$epg,
W=wf$worms,
N_studies=max(wf$study_id),
study=wf$study_id)
max(d.sort$OV_EPG)
max(d.sort$OV_EPG)/10
#antigen indicator
antigen_cutoff <- ifelse(d.sort$OV_antigen_conc=19.4,1,0)) #published cut-off
#antigen indicator
antigen_cutoff <- ifelse(d.sort$OV_antigen_conc>=19.4,1,0)) #published cut-off
#antigen indicator
antigen_cutoff <- ifelse(d.sort$OV_antigen_conc>=19.4,1,0) #published cut-off
#Sort data by id and village
d.sort <- d.cc[order(d.cc$id, d.cc$village_id),]
#antigen indicator
antigen_cutoff <- ifelse(d.sort$OV_antigen_conc>=19.4,1,0) #published cut-off
#Format slides for model
slides <- rep(1, nrow(d.sort))
slide1 <- head(c(1, (cumsum(slides)+1)), -1)
slide2 <- cumsum(slides)
#Read in worm fecundity data
wf <- read.csv("/Users/tomc/Google Drive/Opisthorchis/Spencer/worm-fecund-aut-lao.csv")
#Data list for stan
in.nb <- list(N=nrow(d.sort),
K=nrow(d.sort),
N_clusters=length(unique(d.sort$district_id)),
cluster=d.sort$district_id,
slides=slides,
slide1=slide1,
slide2=slide2,
eggs=d.sort$OV_EPG,
urine=,
antigen=antigen_cutoff,
big_int=500,
egg_neg=d[id.cc, "OV_FECT_Result"],
stool_mass=d[id.cc, "FECT_Weight"],
#worm fecundity data
Nw=nrow(wf),
E=wf$epg,
W=wf$worms,
N_studies=max(wf$study_id),
study=wf$study_id)
#Data list for stan
in.nb <- list(N=nrow(d.sort),
K=nrow(d.sort),
N_clusters=length(unique(d.sort$district_id)),
cluster=d.sort$district_id,
slides=slides,
slide1=slide1,
slide2=slide2,
eggs=d.sort$OV_EPG,
urine=rep(1, nrow(d.sort)),
antigen=antigen_cutoff,
big_int=500,
egg_neg=d.sort$OV_FECT_Result,
stool_mass=rep(1,nrow(d.sort)),
#worm fecundity data
Nw=nrow(wf),
E=wf$epg,
W=wf$worms,
N_studies=max(wf$study_id),
study=wf$study_id)
#Total random effects in model
reffects <- in.nb$N_clusters + in.nb$N_studies
#Compile
mod1 <- cmdstan_model("/Users/tomc/Documents/worm-inference-model/worm-infer-PL.stan")
#Initial values
init_fun <- function(chain_id) list(
M=c(rep(1, in.nb$N_clusters), rep(147, in.nb$N_studies)),
k=0.1, y1=5, gamma=0.8,
sp=0.91, se=0.86)
#Run HMC chains
fit <- mod1$sample(data=in.nb, refresh=10,
chains=1, parallel_chains=1,
thin=1, seed=123, init=init_fun,
iter_warmup=5,
iter_sampling=5)
#Compile
mod1 <- cmdstan_model("/Users/tomc/Documents/worm-inference-model/worm-infer-PL.stan")
#Initial values
init_fun <- function(chain_id) list(
M=c(rep(1, in.nb$N_clusters), rep(147, in.nb$N_studies)),
k=0.1, y1=5, gamma=0.8,
sp=0.91, se=0.86)
#Run HMC chains
fit <- mod1$sample(data=in.nb, refresh=10,
chains=1, parallel_chains=1,
thin=1, seed=123, init=init_fun,
iter_warmup=5,
iter_sampling=5)
#Data list for stan
in.nb <- list(N=nrow(d.sort),
K=nrow(d.sort),
N_clusters=length(unique(d.sort$district_id)),
cluster=d.sort$district_id,
slides=slides,
slide1=slide1,
slide2=slide2,
eggs=d.sort$OV_EPG_int,
urine=rep(1, nrow(d.sort)),
antigen=antigen_cutoff,
big_int=500,
egg_neg=d.sort$OV_FECT_Result,
stool_mass=rep(1,nrow(d.sort)),
#worm fecundity data
Nw=nrow(wf),
E=wf$epg,
W=wf$worms,
N_studies=max(wf$study_id),
study=wf$study_id)
#Total random effects in model
reffects <- in.nb$N_clusters + in.nb$N_studies
#Compile
mod1 <- cmdstan_model("/Users/tomc/Documents/worm-inference-model/worm-infer-PL.stan")
#Initial values
init_fun <- function(chain_id) list(
M=c(rep(1, in.nb$N_clusters), rep(147, in.nb$N_studies)),
k=0.1, y1=5, gamma=0.8,
sp=0.91, se=0.86)
#Run HMC chains
fit <- mod1$sample(data=in.nb, refresh=10,
chains=1, parallel_chains=1,
thin=1, seed=123, init=init_fun,
iter_warmup=5,
iter_sampling=5)
#Initial values
init_fun <- function(chain_id) list(
#M=c(rep(1, in.nb$N_clusters), rep(147, in.nb$N_studies)),
M_alpha=2, M_beta=0.15,
k=0.1, y1=5, gamma=0.8,
sp=0.91, se=0.86)
#Run HMC chains
fit <- mod1$sample(data=in.nb, refresh=10,
chains=1, parallel_chains=1,
thin=1, seed=123, init=init_fun,
iter_warmup=5,
iter_sampling=5)
#Print summary
fit
12750+2200
12750+2200+80000
12750+2200+(0.2*390000)
12750+2200+(0.2*390000)+10000
#Clear workspace (if necessary)
rm(list = ls(all.names = TRUE))
#Set working directory with hard link
#setwd("/gpfs3/users/hollingsworth/mxh325/worm_inference/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#rstan has specific installation requirements - https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(cmdstanr)
library(reshape2)
library(posterior)
#Read in data
d <- read.csv("/Users/tomc/Google Drive/Opisthorchis/Baseline/version-3/OV_cleaned_data_V3.csv") #this dataset has been updated
#Remove observations where observations are missing
d.cc <- d[!is.na(d$village_id)&!is.na(d$OV_EPG)&!is.na(d$OV_antigen_result),]
#Sort data by id and village
d.sort <- d.cc[order(d.cc$id, d.cc$village_id),]
#antigen indicator
antigen_cutoff <- ifelse(d.sort$OV_antigen_conc>=19.4,1,0) #published cut-off
#Format slides for model
slides <- rep(1, nrow(d.sort))
slide1 <- head(c(1, (cumsum(slides)+1)), -1)
slide2 <- cumsum(slides)
#Read in worm fecundity data
wf <- read.csv("/Users/tomc/Google Drive/Opisthorchis/Spencer/worm-fecund-aut-lao.csv")
#Data list for stan
in.nb <- list(N=nrow(d.sort),
K=nrow(d.sort),
N_clusters=length(unique(d.sort$district_id)),
cluster=d.sort$district_id,
slides=slides,
slide1=slide1,
slide2=slide2,
eggs=d.sort$OV_EPG_int,
urine=rep(1, nrow(d.sort)),
antigen=antigen_cutoff,
big_int=500,
egg_neg=d.sort$OV_FECT_Result,
stool_mass=rep(1,nrow(d.sort)),
#worm fecundity data
Nw=nrow(wf),
E=wf$epg,
W=wf$worms,
N_studies=max(wf$study_id),
study=wf$study_id)
#Total random effects in model
reffects <- in.nb$N_clusters + in.nb$N_studies
#Compile
mod1 <- cmdstan_model("/Users/tomc/Documents/worm-inference-model/worm-infer-PL.stan")
#Initial values
init_fun <- function(chain_id) list(
#M=c(rep(1, in.nb$N_clusters), rep(147, in.nb$N_studies)),
M_alpha=2, M_beta=0.15,
k=0.1, y1=5, gamma=0.8,
sp=0.91, se=0.86)
#Run HMC chains
fit <- mod1$sample(data=in.nb, refresh=10,
chains=1, parallel_chains=1,
thin=1, seed=123, init=init_fun,
iter_warmup=25,
iter_sampling=100)
300*5
500*5
1.7^10
1.7^exp(1)
exp(4.2)
exp(1.7)
exp(4.2)
4.2^10
0.7^10
10^0.7
exp(0.7)
107+7+3
107+7+3
7*5+3*20
95/117
log(0.812)
log(0.812, base=10)
log(1)
38+19+6+4+1
19*5+6*20+4*50+1*150
565/68
log(8.3)
log(8.3, base=10)
7*5+3*20
7*6+3*25
log(1)
log(1, base=10)
log(1.1, base=10)
log(1.1)
0.35^10
10^0.35
exp(0.35)
log(29.6)
log(29.6, base=10)
log(2894)
log(2894, base=10)
log(3445, base=10)
log(3445)
exp(0.6)
10^(0.6)
log(29.6)
log(29.6, base=10)
10^0.9
10^0.95
107+7+3
7*5+3*23
104/117
log(104/117)
log(104/117, base=10)
log(104/117)
d <- read.table("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/Sato_Lao_expulsion/Sato_data_extract.txt", sep="\t", header=T)
dev.off()
d <- read.table("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/Sato_Lao_expulsion/Sato_data_extract.txt", sep="\t", header=T)
d <- read.table("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/Sato_Lao_expulsion/Sato_data_extract.txt", sep="\t", header=T)
#Analysis of Sato et al. Worm expulsion Lao
rm(list=ls())
#Analysis of Sato et al. Worm expulsion Lao
#rm(list=ls())
library(ggplot)
d.2008 <- d[d$year==2008,]
d <- read.table("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/Sato_Lao_expulsion/Sato_data_extract.txt", sep="\t", header=T)
d.2008 <- d[d$year==2008,]
head(d.2008)
head(d)
tail(d)
d.2011 <- d[d$year==2011,]
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008)
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16)
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms")
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms", col="red")
points(M_Ov_worms~age_midpoint, data=d.2011,
pch=16,col="blue")
require(lamW)
k_estim <- function(p,m){
numer = -m*log(1-p)
denom1 = log(1-p)
denom2 = (1-p)^(1/m)*log(1-p)/m
lambert = lambertWm1(denom2)
k = numer/(denom1-m*lambert)
return(k)
}
d <- read.table("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/Sato_Lao_expulsion/Sato_data_extract.txt", sep="\t", header=T)
#Estimate k from M and prevalence
d$k <- k_estim(p=d$p_Ov_worms, m=d$M_Ov_worms)
d$k
#Estimate k from M and prevalence
k_est <- k_estim(p=d$p_Ov_worms, m=d$M_Ov_worms)
d$k <- ifelse(k_est==NaN, 0, k_est)
d$k <- ifelse(is.NaN(k_est), 0, k_est)
d$k <- ifelse(is.nan(k_est), 0, k_est)
d$k
hist(d$k)
#Obtain highest estimate of prevalence from PCR & worm expul
d$p_highest <- ifelse(d$p_Ov_worms>=d$p_Ov_PCR, d$p_Ov_worms, d$p_Ov_PCR)
#Estimate k from M and prevalence
k_est <- k_estim(p=d$p_highest, m=d$M_Ov_worms)
d$k <- ifelse(is.nan(k_est), 0, k_est)
d.2008 <- d[d$year==2008,]
summary(d$k)
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms", col="red")
points(M_Ov_worms~age_midpoint, data=d.2011,
pch=16,col="blue")
lines(M_Ov_worms~age_midpoint, data=d.2008,col="red")
lines(M_Ov_worms~age_midpoint, data=d.2011,col="blue")
#Plot k
plot(d$k~d$age_midpoint)
#Estimate k from M and prevalence
#k_est <- k_estim(p=d$p_highest, m=d$M_Ov_worms)
k_est <- k_estim(p=d$p_Ov_worms, m=d$M_Ov_worms)
d$k <- ifelse(is.nan(k_est), 0, k_est)
summary(d$k)
#Subset by year of data collection
d.2008 <- d[d$year==2008,]
d.2011 <- d[d$year==2011,]
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms", col="red")
lines(M_Ov_worms~age_midpoint, data=d.2008,col="red")
points(M_Ov_worms~age_midpoint, data=d.2011,
pch=16,col="blue")
lines(M_Ov_worms~age_midpoint, data=d.2011,col="blue")
#Plot k
plot(d$k~d$age_midpoint)
#Check Haswell-Elkins dataset
he <- read.csv("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/extracted-data/Haswell-Elkins-age-distribution.csv")
head(he)
#Check Haswell-Elkins dataset
he <- read.csv("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/extracted-data/Haswell-Elkins-age-distribution.csv",header=F)
head(he)
colnames(he) <- c("age_group", "log_M")
he
he$age_midpoint <- c(2,7,12,20,30,40,50,60)
he$M <- 10^he$log_M
he$M
points(M~age_midpoint, data=he, pch=16, col="darkgreen")
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms",
col="red", xlim=c(0,60))
lines(M_Ov_worms~age_midpoint, data=d.2008,col="red")
points(M_Ov_worms~age_midpoint, data=d.2011,
pch=16,col="blue")
lines(M_Ov_worms~age_midpoint, data=d.2011,col="blue")
#Plot k
plot(d$k~d$age_midpoint)
#Plot age distribution
plot(M_Ov_worms~age_midpoint, data=d.2008, pch=16,
xlab="Age", ylab="Mean O. viverrini worms",
col="red", xlim=c(0,60))
lines(M_Ov_worms~age_midpoint, data=d.2008,col="red")
points(M_Ov_worms~age_midpoint, data=d.2011,
pch=16,col="blue")
lines(M_Ov_worms~age_midpoint, data=d.2011,col="blue")
#Check Haswell-Elkins dataset
he <- read.csv("/Users/tomc/Google Drive/Opisthorchis/worm-output-digitise/extracted-data/Haswell-Elkins-age-distribution.csv",header=F)
colnames(he) <- c("age_group", "log_M")
he$age_midpoint <- c(2,7,12,20,30,40,50,60)
he$M <- 10^he$log_M
points(M~age_midpoint, data=he, pch=16, col="darkgreen")
lines(M~age_midpoint, data=he, col="darkgreen")
summary(he$M)
26/4
summary(he$M*6.5)
exp(-5)
exp(5)
exp(0)
16250+2200+(0.2*435000)
